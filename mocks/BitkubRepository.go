// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/naruebaet/bitkubsdk/src/model"
	mock "github.com/stretchr/testify/mock"

	websocket "github.com/gorilla/websocket"
)

// BitkubRepository is an autogenerated mock type for the BitkubRepository type
type BitkubRepository struct {
	mock.Mock
}

// GetAsks provides a mock function with given fields: sym, lmt
func (_m *BitkubRepository) GetAsks(sym string, lmt int) (model.BidsAskResponse, error) {
	ret := _m.Called(sym, lmt)

	var r0 model.BidsAskResponse
	if rf, ok := ret.Get(0).(func(string, int) model.BidsAskResponse); ok {
		r0 = rf(sym, lmt)
	} else {
		r0 = ret.Get(0).(model.BidsAskResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(sym, lmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBids provides a mock function with given fields: sym, lmt
func (_m *BitkubRepository) GetBids(sym string, lmt int) (model.BidsAskResponse, error) {
	ret := _m.Called(sym, lmt)

	var r0 model.BidsAskResponse
	if rf, ok := ret.Get(0).(func(string, int) model.BidsAskResponse); ok {
		r0 = rf(sym, lmt)
	} else {
		r0 = ret.Get(0).(model.BidsAskResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(sym, lmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields: sym, lmt
func (_m *BitkubRepository) GetBooks(sym string, lmt int) (model.BooksResponse, error) {
	ret := _m.Called(sym, lmt)

	var r0 model.BooksResponse
	if rf, ok := ret.Get(0).(func(string, int) model.BooksResponse); ok {
		r0 = rf(sym, lmt)
	} else {
		r0 = ret.Get(0).(model.BooksResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(sym, lmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDepth provides a mock function with given fields: sym, lmt
func (_m *BitkubRepository) GetDepth(sym string, lmt int) (model.BooksResponse, error) {
	ret := _m.Called(sym, lmt)

	var r0 model.BooksResponse
	if rf, ok := ret.Get(0).(func(string, int) model.BooksResponse); ok {
		r0 = rf(sym, lmt)
	} else {
		r0 = ret.Get(0).(model.BooksResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(sym, lmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerStatus provides a mock function with given fields:
func (_m *BitkubRepository) GetServerStatus() ([]model.ServerStatusResponse, error) {
	ret := _m.Called()

	var r0 []model.ServerStatusResponse
	if rf, ok := ret.Get(0).(func() []model.ServerStatusResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ServerStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerTime provides a mock function with given fields:
func (_m *BitkubRepository) GetServerTime() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSymbols provides a mock function with given fields:
func (_m *BitkubRepository) GetSymbols() (model.SymbolResponse, error) {
	ret := _m.Called()

	var r0 model.SymbolResponse
	if rf, ok := ret.Get(0).(func() model.SymbolResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.SymbolResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields: sym
func (_m *BitkubRepository) GetTicker(sym string) (map[string]model.TickerResponseResult, error) {
	ret := _m.Called(sym)

	var r0 map[string]model.TickerResponseResult
	if rf, ok := ret.Get(0).(func(string) map[string]model.TickerResponseResult); ok {
		r0 = rf(sym)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]model.TickerResponseResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sym)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrades provides a mock function with given fields: sym, lmt
func (_m *BitkubRepository) GetTrades(sym string, lmt int) (model.TradeResponse, error) {
	ret := _m.Called(sym, lmt)

	var r0 model.TradeResponse
	if rf, ok := ret.Get(0).(func(string, int) model.TradeResponse); ok {
		r0 = rf(sym, lmt)
	} else {
		r0 = ret.Get(0).(model.TradeResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(sym, lmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTradingview provides a mock function with given fields: sym, frame, frm, lmt
func (_m *BitkubRepository) GetTradingview(sym string, frame int, frm int, lmt int) (model.TradingviewResponse, error) {
	ret := _m.Called(sym, frame, frm, lmt)

	var r0 model.TradingviewResponse
	if rf, ok := ret.Get(0).(func(string, int, int, int) model.TradingviewResponse); ok {
		r0 = rf(sym, frame, frm, lmt)
	} else {
		r0 = ret.Get(0).(model.TradingviewResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, int) error); ok {
		r1 = rf(sym, frame, frm, lmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchTicker provides a mock function with given fields: ctx, operations
func (_m *BitkubRepository) WatchTicker(ctx context.Context, operations func(*websocket.Conn)) {
	_m.Called(ctx, operations)
}

// WatchTrade provides a mock function with given fields: ctx, operations
func (_m *BitkubRepository) WatchTrade(ctx context.Context, operations func(*websocket.Conn)) {
	_m.Called(ctx, operations)
}
